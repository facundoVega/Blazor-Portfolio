@inject IJSRuntime JS;

<div class="navbar-container">
    <div class="@mobileMenuClass">
        @foreach (var navItem in NavItems)
        {
            <button class="mobile-menu-link text-light" @onclick='(()=>scrollTo(navItem.LinkSectionId))'>@navItem.LinkValue</button>
        }
        <button type="button" class="mobile-language-button" @onclick=toggleMobileLanguageMenu>
            <i class="bi bi-globe2"></i>@activeLanguage
        </button>

        <div class="@mobileLanguageClass">
            <a class="mobile-language-title" href="#" @onclick=toggleMobileLanguageMenu>
                <span class="header-icon"><i class="bi bi-chevron-left"></i></span>
                <span class="header-text">Select a language</span>
            </a>
            <ul class="mobile-language-list">
                <li class="@(activeLanguage == "English" ? "active-language" : "")" @onclick='(()=>ToggleActiveLanguageItem("English"))'>English</li>
                <li class="@(activeLanguage == "Español" ? "active-language" : "")" @onclick='(()=>ToggleActiveLanguageItem("Español"))'>Español</li>
            </ul>
        </div>
    </div>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid main-navbar-container">
            <button class="navbar-brand navbar-brand-icon text-light" @onclick='(()=>scrollTo("welcome"))'>@LogoPhrase</button>
            <button class="navbar-toggler" type="button" @onclick=ToggleMobileMenu data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon" hidden="@displayMobileMenu"><i class="bi bi-list"></i></span>
                <span class="navbar-toggler-icon close-icon" hidden="@(!displayMobileMenu)"><i class="bi bi-x-lg"></i></span>
        </button>
        <div class="collapse navbar-collapse navbar-items-container" id="navbarNavAltMarkup" >
            <div class="navbar-nav">
                @foreach(var navItem in NavItems)
                    {
                        <button class="nav-link text-light" @onclick='(()=>scrollTo(navItem.LinkSectionId))'>@navItem.LinkValue</button>
                    }
            </div>
        </div>
        <div class="language-button-container">
            <button type="button" @onclick=ToggleDropdown class="language-button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-globe2"></i>
            </button>
            <ul class="dropdown-menu language-dropdown-menu @(toggle)" tabindex="0">
                <li class="language-item @(activeLanguage == "English" ? "active-language" : "")" @onclick='(()=>ToggleActiveLanguageItem("English"))'>English</li>
                <li class="language-item @(activeLanguage == "Español" ? "active-language" : "")" @onclick='(()=>ToggleActiveLanguageItem("Español"))'>Español</li>
            </ul>
        </div>
    </div> 
</nav>
</div>

@code {
    private string LogoPhrase = "FV";
    private List<Models.NavLink> NavItems = new List<Models.NavLink>()
    { 
        new Models.NavLink { LinkValue = "About me", LinkSectionId = "about-me" },
        new Models.NavLink { LinkValue = "Certs", LinkSectionId = "certs" },
        new Models.NavLink { LinkValue = "Stack", LinkSectionId = "stack" },
        new Models.NavLink { LinkValue = "Contact me", LinkSectionId = "contact-me" },
        new Models.NavLink { LinkValue = "Experience", LinkSectionId = "experience" },
    };

    private string toggle = "hide";
    private bool displayMobileMenu = false;
    private string mobileMenuClass = "mobile-menu-initial";
    private string mobileLanguageClass = "mobile-menu-initial";
    private string activeLanguage = "English";

    private void ToggleDropdown()
    {
        toggle = toggle == "hide" ? "show" : "hide"; 

    }

    private void ToggleMobileMenu()
    {
        displayMobileMenu = !displayMobileMenu;
        mobileLanguageClass = !displayMobileMenu && mobileLanguageClass == "mobile-language-show" ? "mobile-language-hide" : mobileLanguageClass;
        mobileMenuClass = displayMobileMenu ? "mobile-menu-show" : "mobile-menu-hide";
    }

    private void toggleMobileLanguageMenu()
    {
        mobileLanguageClass = mobileLanguageClass == "mobile-menu-initial" || mobileLanguageClass == "mobile-language-hide" ?
                                   "mobile-language-show" : "mobile-language-hide";
    }

    private void scrollTo(string elementId)
    {
        var jsInProcess = (IJSInProcessRuntime)JS;
        jsInProcess.InvokeVoid("scrollToElement", elementId);
        displayMobileMenu = false;
        mobileMenuClass = "mobile-menu-hide";
    }

    private void ToggleActiveLanguageItem(string currentItem)
    {
        activeLanguage = currentItem;
    }
}
